/**
 * @file checkTokenBalances.js
 * @description Script para verifica√ß√£o de saldos dos tokens SPBToken e BPSToken.
 *              Inclui valida√ß√µes robustas, formata√ß√£o de valores, logs detalhados
 *              e compatibilidade com Solidity 0.8.28. Otimizado para uso com Hardhat e ethers.js v6.
 * @author [Seu Nome ou Nome da Empresa]
 * @version 1.0.0
 * @date 2025-06-22
 */

const { ethers } = require("hardhat");
const fs = require("fs").promises;
const path = require("path");

/**
 * @notice Configura√ß√µes globais do script
 * @type {Object}
 */
const CONFIG = {
  DEPLOYMENTS_DIR: "./deployments", // Diret√≥rio dos arquivos de implanta√ß√£o
  ADDRESS_FILE: "token-addresses.json", // Arquivo com endere√ßos dos contratos
  BALANCE_LOG_FILE: "balance-check-logs.json", // Arquivo para logs de verifica√ß√£o
  DEFAULT_DECIMALS: 18, // Decimais padr√£o para tokens ERC20
  BATCH_SIZE: 10, // Tamanho do lote para consultas em massa
  RETRY_ATTEMPTS: 3, // Tentativas de reconex√£o em caso de falha
  RETRY_DELAY: 1000 // Delay entre tentativas (ms)
};

/**
 * @notice Carrega os endere√ßos dos contratos do arquivo de implanta√ß√£o
 * @returns {Promise<Object>} - Objeto com os endere√ßos dos contratos
 * @throws {Error} - Lan√ßa erro se o arquivo n√£o for encontrado ou for inv√°lido
 */
async function loadContractAddresses() {
  try {
    const filePath = path.join(CONFIG.DEPLOYMENTS_DIR, CONFIG.ADDRESS_FILE);
    const fileContent = await fs.readFile(filePath, "utf8");
    const addresses = JSON.parse(fileContent);
    
    if (!addresses.SPBToken || !addresses.BPSToken) {
      throw new Error("Endere√ßos dos contratos SPBToken ou BPSToken n√£o encontrados no arquivo");
    }
    
    console.log(`‚úÖ Endere√ßos carregados de: ${filePath}`);
    console.log(`üìç SPBToken: ${addresses.SPBToken}`);
    console.log(`üìç BPSToken: ${addresses.BPSToken}`);
    
    return addresses;
  } catch (error) {
    throw new Error(`Falha ao carregar endere√ßos dos contratos: ${error.message}`);
  }
}

/**
 * @notice Valida se um endere√ßo Ethereum √© v√°lido
 * @param {string} address - Endere√ßo a ser validado
 * @returns {boolean} - Retorna true se o endere√ßo for v√°lido
 */
function isValidAddress(address) {
  return ethers.isAddress(address);
}

/**
 * @notice Obt√©m uma inst√¢ncia do contrato de token
 * @param {string} tokenAddress - Endere√ßo do contrato do token
 * @param {ethers.Signer} signer - Signer para interagir com o contrato
 * @returns {Promise<ethers.Contract>} - Inst√¢ncia do contrato
 */
async function getTokenContract(tokenAddress, signer) {
  // ABI m√≠nima para tokens ERC20
  const tokenABI = [
    "function name() view returns (string)",
    "function symbol() view returns (string)",
    "function decimals() view returns (uint8)",
    "function totalSupply() view returns (uint256)",
    "function balanceOf(address owner) view returns (uint256)",
    "function allowance(address owner, address spender) view returns (uint256)"
  ];
  
  return new ethers.Contract(tokenAddress, tokenABI, signer);
}

/**
 * @notice Obt√©m informa√ß√µes b√°sicas do token
 * @param {ethers.Contract} tokenContract - Contrato do token
 * @param {string} tokenName - Nome identificador do token (SPB ou BPS)
 * @returns {Promise<Object>} - Informa√ß√µes do token
 */
async function getTokenInfo(tokenContract, tokenName) {
  try {
    const [name, symbol, decimals, totalSupply] = await Promise.all([
      tokenContract.name(),
      tokenContract.symbol(),
      tokenContract.decimals(),
      tokenContract.totalSupply()
    ]);
    
    return {
      name: name,
      symbol: symbol,
      decimals: Number(decimals),
      totalSupply: totalSupply.toString(),
      totalSupplyFormatted: ethers.formatUnits(totalSupply, decimals),
      address: await tokenContract.getAddress()
    };
  } catch (error) {
    throw new Error(`Falha ao obter informa√ß√µes do token ${tokenName}: ${error.message}`);
  }
}

/**
 * @notice Verifica o saldo de um token para um endere√ßo espec√≠fico
 * @param {ethers.Contract} tokenContract - Contrato do token
 * @param {string} address - Endere√ßo da conta
 * @param {number} decimals - Decimais do token
 * @returns {Promise<Object>} - Saldo em wei e formatado
 */
async function checkTokenBalance(tokenContract, address, decimals) {
  try {
    const balance = await tokenContract.balanceOf(address);
    return {
      raw: balance.toString(),
      formatted: ethers.formatUnits(balance, decimals),
      address: address
    };
  } catch (error) {
    throw new Error(`Falha ao verificar saldo para ${address}: ${error.message}`);
  }
}

/**
 * @notice Verifica saldos de m√∫ltiplos endere√ßos para um token
 * @param {ethers.Contract} tokenContract - Contrato do token
 * @param {string[]} addresses - Array de endere√ßos
 * @param {number} decimals - Decimais do token
 * @returns {Promise<Object[]>} - Array com saldos de cada endere√ßo
 */
async function checkMultipleBalances(tokenContract, addresses, decimals) {
  const balances = [];
  
  for (let i = 0; i < addresses.length; i += CONFIG.BATCH_SIZE) {
    const batch = addresses.slice(i, i + CONFIG.BATCH_SIZE);
    const batchPromises = batch.map(address => 
      checkTokenBalance(tokenContract, address, decimals)
    );
    
    try {
      const batchResults = await Promise.all(batchPromises);
      balances.push(...batchResults);
      console.log(`‚úÖ Processado lote ${Math.floor(i / CONFIG.BATCH_SIZE) + 1}/${Math.ceil(addresses.length / CONFIG.BATCH_SIZE)}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Erro no lote ${Math.floor(i / CONFIG.BATCH_SIZE) + 1}: ${error.message}`);
    }
  }
  
  return balances;
}

/**
 * @notice Obt√©m lista de endere√ßos para verifica√ß√£o
 * @returns {Promise<string[]>} - Array de endere√ßos v√°lidos
 */
async function getAddressesToCheck() {
  const [deployer] = await ethers.getSigners();
  const addresses = [deployer.address];
  
  // Adiciona endere√ßos das vari√°veis de ambiente se estiverem definidas
  if (process.env.CHECK_ADDRESSES) {
    const envAddresses = process.env.CHECK_ADDRESSES.split(",")
      .map(addr => addr.trim())
      .filter(addr => isValidAddress(addr));
    addresses.push(...envAddresses);
  }
  
  // Remove duplicatas
  return [...new Set(addresses)];
}

/**
 * @notice Salva logs da verifica√ß√£o de saldos
 * @param {Object} logData - Dados do log
 * @returns {Promise<void>}
 */
async function saveBalanceCheckLogs(logData) {
  try {
    const filePath = path.join(CONFIG.DEPLOYMENTS_DIR, CONFIG.BALANCE_LOG_FILE);
    await fs.mkdir(CONFIG.DEPLOYMENTS_DIR, { recursive: true });
    
    // Carrega logs existentes
    let existingLogs = [];
    try {
      const existingData = await fs.readFile(filePath, "utf8");
      existingLogs = JSON.parse(existingData);
      if (!Array.isArray(existingLogs)) {
        existingLogs = [];
      }
    } catch (error) {
      // Arquivo n√£o existe, inicia com array vazio
    }
    
    // Adiciona novo log
    existingLogs.push(logData);
    await fs.writeFile(filePath, JSON.stringify(existingLogs, null, 2));
    console.log(`‚úÖ Logs salvos em: ${filePath}`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è Falha ao salvar logs: ${error.message}`);
  }
}

/**
 * @notice Formata e exibe os resultados da verifica√ß√£o
 * @param {Object} tokenInfo - Informa√ß√µes do token
 * @param {Object[]} balances - Array com saldos
 * @param {string} tokenName - Nome do token
 */
function displayResults(tokenInfo, balances, tokenName) {
  console.log(`\nüìä === RESULTADOS ${tokenName} ===`);
  console.log(`üè∑Ô∏è  Nome: ${tokenInfo.name}`);
  console.log(`üî§ S√≠mbolo: ${tokenInfo.symbol}`);
  console.log(`üî¢ Decimais: ${tokenInfo.decimals}`);
  console.log(`üìà Supply Total: ${tokenInfo.totalSupplyFormatted} ${tokenInfo.symbol}`);
  console.log(`üìç Endere√ßo: ${tokenInfo.address}`);
  
  console.log(`\nüí∞ SALDOS:`);
  balances.forEach((balance, index) => {
    const hasBalance = parseFloat(balance.formatted) > 0;
    const icon = hasBalance ? "üíµ" : "üí∏";
    console.log(`${icon} ${balance.address}: ${balance.formatted} ${tokenInfo.symbol}`);
  });
  
  // Calcula estat√≠sticas
  const totalBalance = balances.reduce((sum, balance) => {
    return sum + parseFloat(balance.formatted);
  }, 0);
  
  const accountsWithBalance = balances.filter(balance => 
    parseFloat(balance.formatted) > 0
  ).length;
  
  console.log(`\nüìà ESTAT√çSTICAS:`);
  console.log(`üî¢ Total de contas verificadas: ${balances.length}`);
  console.log(`üí∞ Contas com saldo: ${accountsWithBalance}`);
  console.log(`üìä Saldo total verificado: ${totalBalance.toFixed(6)} ${tokenInfo.symbol}`);
}

/**
 * @notice Fun√ß√£o principal para verifica√ß√£o de saldos
 * @returns {Promise<void>}
 */
async function main() {
  try {
    // Obt√©m informa√ß√µes da rede
    const network = await ethers.provider.getNetwork();
    const networkName = hre.network.name || "unknown";
    const [signer] = await ethers.getSigners();
    
    console.log(`\nüîç Iniciando verifica√ß√£o de saldos na rede: ${networkName} (chainId: ${network.chainId})`);
    console.log(`üë§ Conta conectada: ${signer.address}`);
    
    // Carrega endere√ßos dos contratos
    const contractAddresses = await loadContractAddresses();
    
    // Obt√©m endere√ßos para verifica√ß√£o
    const addressesToCheck = await getAddressesToCheck();
    console.log(`üìã Endere√ßos a verificar: ${addressesToCheck.length}`);
    addressesToCheck.forEach((addr, index) => {
      console.log(`   ${index + 1}. ${addr}`);
    });
    
    // Obt√©m contratos dos tokens
    const spbContract = await getTokenContract(contractAddresses.SPBToken, signer);
    const bpsContract = await getTokenContract(contractAddresses.BPSToken, signer);
    
    // Obt√©m informa√ß√µes dos tokens
    console.log(`\nüì° Obtendo informa√ß√µes dos tokens...`);
    const [spbInfo, bpsInfo] = await Promise.all([
      getTokenInfo(spbContract, "SPB"),
      getTokenInfo(bpsContract, "BPS")
    ]);
    
    // Verifica saldos
    console.log(`\nüîç Verificando saldos...`);
    const [spbBalances, bpsBalances] = await Promise.all([
      checkMultipleBalances(spbContract, addressesToCheck, spbInfo.decimals),
      checkMultipleBalances(bpsContract, addressesToCheck, bpsInfo.decimals)
    ]);
    
    // Exibe resultados
    displayResults(spbInfo, spbBalances, "SPBToken");
    displayResults(bpsInfo, bpsBalances, "BPSToken");
    
    // Prepara dados para log
    const logData = {
      timestamp: new Date().toISOString(),
      network: {
        name: networkName,
        chainId: network.chainId.toString()
      },
      signer: signer.address,
      addressesChecked: addressesToCheck.length,
      tokens: {
        SPBToken: {
          ...spbInfo,
          balances: spbBalances,
          totalCheckedBalance: spbBalances.reduce((sum, b) => sum + parseFloat(b.formatted), 0)
        },
        BPSToken: {
          ...bpsInfo,
          balances: bpsBalances,
          totalCheckedBalance: bpsBalances.reduce((sum, b) => sum + parseFloat(b.formatted), 0)
        }
      }
    };
    
    // Salva logs
    await saveBalanceCheckLogs(logData);
    
    console.log(`\nüéâ Verifica√ß√£o de saldos conclu√≠da com sucesso!`);
    
  } catch (error) {
    console.error("‚ùå Erro durante a verifica√ß√£o de saldos:", error.message);
    throw error;
  }
}

// Executa a fun√ß√£o principal e lida com erros
main()
  .then(() => {
    console.log("‚úÖ Script de verifica√ß√£o conclu√≠do.");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Falha no script:", error);
    process.exit(1);
  });
